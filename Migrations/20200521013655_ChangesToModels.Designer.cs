// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using learnhotchocolate.Data;

namespace learnhotchocolate.Migrations
{
    [DbContext(typeof(LearnHotChocolateContext))]
    [Migration("20200521013655_ChangesToModels")]
    partial class ChangesToModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("learnhotchocolate.Models.Income", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IncomeCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IncomeCategoryId1")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("IncomeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IncomeSourceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex("IncomeCategoryId1");

                    b.HasIndex("IncomeSourceId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("learnhotchocolate.Models.IncomeCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IncomeCategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("IncomeCategories");
                });

            modelBuilder.Entity("learnhotchocolate.Models.IncomeSource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("learnhotchocolate.Models.Income", b =>
                {
                    b.HasOne("learnhotchocolate.Models.IncomeCategory", "IncomeCategory")
                        .WithMany()
                        .HasForeignKey("IncomeCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("learnhotchocolate.Models.IncomeCategory", null)
                        .WithMany("Incomes")
                        .HasForeignKey("IncomeCategoryId1");

                    b.HasOne("learnhotchocolate.Models.IncomeSource", "IncomeSource")
                        .WithMany()
                        .HasForeignKey("IncomeSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
